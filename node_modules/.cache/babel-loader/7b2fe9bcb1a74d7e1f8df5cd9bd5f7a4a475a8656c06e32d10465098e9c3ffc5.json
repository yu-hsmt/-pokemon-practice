{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { computed, watch, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  __name: 'PokemonList',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var store = useStore();\n    var searchQuery = computed({\n      //以下をsearchQueryとする\n      get: function get() {\n        return store.state.searchQuery;\n      },\n      //storeのstateに入っているsearchQuery（setされたもの）を取得（リアルタイムで変更を検知・スクリプトを動かすためにsetしてgetする必要がある）\n      set: function set(value) {\n        return store.commit('SET_SEARCH_QUERY', value);\n      } //searchQueryの値（検索窓に入力した値）をstoreのSET_SEARCH_QUERYの値としてコミット（リアルタイムで入力状態をみて結果を返す）\n    });\n    var sortOrder = computed(function () {\n      return store.state.sortOrder;\n    }); //storeのstateに入っているsortOrderの値を取得して「sortOrder」とする\n    var filteredPokemons = computed(function () {\n      return store.getters.filteredPokemons;\n    }); //storeのgettersに入っているfilteredPokemonsを「filteredPokemons」とする\n    var loading = computed(function () {\n      return store.getters.loading;\n    }); //storeのgettersに入っているloadingを「loading」とする\n    var pokemonDetails = function pokemonDetails(name) {\n      return store.getters.pokemonDetails(name);\n    }; //storenのgettersに入っているpokemonDetails(name)を「pokemonDetails」とする\n\n    var fetchPokemons = function fetchPokemons() {\n      return store.dispatch('fetchPokemons');\n    }; //storeのfetchPokemonを「fetchPokemon」とする\n    var fetchPokemonDetails = function fetchPokemonDetails(name) {\n      return store.dispatch('fetchPokemonDetails', name);\n    }; //storeのfetchPokemonDetails(name)を「fetchPokemonDetails」とする\n\n    var toggleSortOrder = function toggleSortOrder() {\n      var newOrder = sortOrder.value === 'asc' ? 'desc' : 'asc'; //sortOrderの値が'asc'なら「desc」を、そうでなければ「asc」をnewOrderとする\n      store.commit('SET_SORT_ORDER', newOrder); //storeのSET_SORT_ORDERにnewOrderをコミット\n    };\n    var loadPokemonDetails = function loadPokemonDetails(name) {\n      if (!pokemonDetails(name)) {\n        //pokemonDetails(name)がなかったら（=ページの初期ロード時やロードに失敗した時）\n        fetchPokemonDetails(name); //nameを引数としてfetchPokemonDetailsを実行\n      }\n    };\n    watch(filteredPokemons, function (newPokemons) {\n      //filteredPokemonsに変更があったら以下を実行\n      newPokemons.forEach(function (pokemon) {\n        return loadPokemonDetails(pokemon.name);\n      }); //loadPokemonDetailsを実行\n    });\n    onMounted(function () {\n      fetchPokemons(); //fetchPokemons()を実行\n    });\n    var __returned__ = {\n      store: store,\n      searchQuery: searchQuery,\n      sortOrder: sortOrder,\n      filteredPokemons: filteredPokemons,\n      loading: loading,\n      pokemonDetails: pokemonDetails,\n      fetchPokemons: fetchPokemons,\n      fetchPokemonDetails: fetchPokemonDetails,\n      toggleSortOrder: toggleSortOrder,\n      loadPokemonDetails: loadPokemonDetails,\n      computed: computed,\n      watch: watch,\n      onMounted: onMounted,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","watch","onMounted","useStore","store","searchQuery","get","state","set","value","commit","sortOrder","filteredPokemons","getters","loading","pokemonDetails","name","fetchPokemons","dispatch","fetchPokemonDetails","toggleSortOrder","newOrder","loadPokemonDetails","newPokemons","forEach","pokemon"],"sources":["/Users/yu/pokemon-app_/src/components/PokemonList.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"12\">\n                <v-text-field\n                    label=\"Search Pokemons\"\n                    v-model=\"searchQuery\"\n                ></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-btn @click=\"toggleSortOrder\" color=\"primary\">\n                    Sort: {{ sortOrder === 'asc' ? 'Ascending' : 'Descending' }} <!-- sortOrderが「asc」だったらAscending、そうでなければDescendingという文言を表示 -->\n                </v-btn>\n            </v-col>\n            <v-col cols=\"12\" v-if=\"loading\" class=\"loading_area\"> <!-- loadingがtrueの場合、このエリアを表示 -->\n                <v-progress-circular\n                    indeterminate\n                    color=\"primary\"\n                    size=\"64\"\n                    ></v-progress-circular>\n            </v-col>\n            <v-col v-if=\"!loading\" v-for=\"pokemon in filteredPokemons\" :key=\"pokemon.name\" cols=\"12\" md=\"4\">\n                <v-card>\n                    <v-card-title>{{ pokemonDetails(pokemon.name)?.name || pokemon.name }}</v-card-title> <!-- {{ pokemon.name }}でもいいけど、念の為条件分岐している。ポケモンの名前を出す -->\n                    <v-card-text>\n                        <v-img\n                            v-if=\"pokemonDetails(pokemon.name)\"\n                            :src=\"pokemonDetails(pokemon.name).sprites.front_default\"  \n                            :alt=\"pokemon.name\"\n                            height=\"200\"  \n                        ></v-img>\n                        <v-progress-circular\n                            v-else\n                            interminate\n                            color=\"primary\"\n                            ></v-progress-circular>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script setup>\nimport { computed,watch, onMounted } from 'vue';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\n\nconst searchQuery = computed({ //以下をsearchQueryとする\n    get: () => store.state.searchQuery, //storeのstateに入っているsearchQuery（setされたもの）を取得（リアルタイムで変更を検知・スクリプトを動かすためにsetしてgetする必要がある）\n    set: (value) => store.commit('SET_SEARCH_QUERY', value) //searchQueryの値（検索窓に入力した値）をstoreのSET_SEARCH_QUERYの値としてコミット（リアルタイムで入力状態をみて結果を返す）\n});\n\nconst sortOrder = computed(() => store.state.sortOrder); //storeのstateに入っているsortOrderの値を取得して「sortOrder」とする\nconst filteredPokemons = computed(() => store.getters.filteredPokemons); //storeのgettersに入っているfilteredPokemonsを「filteredPokemons」とする\nconst loading = computed(() => store.getters.loading); //storeのgettersに入っているloadingを「loading」とする\nconst pokemonDetails = (name) => store.getters.pokemonDetails(name); //storenのgettersに入っているpokemonDetails(name)を「pokemonDetails」とする\n\nconst fetchPokemons = () => store.dispatch('fetchPokemons') //storeのfetchPokemonを「fetchPokemon」とする\nconst fetchPokemonDetails = (name) => store.dispatch('fetchPokemonDetails', name);//storeのfetchPokemonDetails(name)を「fetchPokemonDetails」とする\n\nconst toggleSortOrder = () => {\n    const newOrder = sortOrder.value === 'asc' ? 'desc' : 'asc'; //sortOrderの値が'asc'なら「desc」を、そうでなければ「asc」をnewOrderとする\n    store.commit('SET_SORT_ORDER', newOrder); //storeのSET_SORT_ORDERにnewOrderをコミット\n};\n\nconst loadPokemonDetails = (name) => {\n    if (!pokemonDetails(name)) { //pokemonDetails(name)がなかったら（=ページの初期ロード時やロードに失敗した時）\n        fetchPokemonDetails(name); //nameを引数としてfetchPokemonDetailsを実行\n    }\n};\n\nwatch(filteredPokemons, (newPokemons) => { //filteredPokemonsに変更があったら以下を実行\n    newPokemons.forEach(pokemon => loadPokemonDetails(pokemon.name)); //loadPokemonDetailsを実行\n});\n\nonMounted(() => {\n    fetchPokemons(); //fetchPokemons()を実行\n});\n</script>\n\n<style scoped>\n.loading_area {\n    display: flex;\n    justify-content: center;\n}\n\n.v-btn {\n    margin-bottom: 20px;\n}\n</style>\n"],"mappings":";;;;;AA4CA,SAASA,QAAQ,EAACC,KAAK,EAAEC,SAAS,QAAQ,KAAK;AAC/C,SAASC,QAAQ,QAAQ,MAAM;;;;;;IAE/B,IAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,IAAME,WAAW,GAAGL,QAAQ,CAAC;MAAE;MAC3BM,GAAG,EAAE,SAAAA,IAAA;QAAA,OAAMF,KAAK,CAACG,KAAK,CAACF,WAAW;MAAA;MAAE;MACpCG,GAAG,EAAE,SAAAA,IAACC,KAAK;QAAA,OAAKL,KAAK,CAACM,MAAM,CAAC,kBAAkB,EAAED,KAAK,CAAC;MAAA,EAAC;IAC5D,CAAC,CAAC;IAEF,IAAME,SAAS,GAAGX,QAAQ,CAAC;MAAA,OAAMI,KAAK,CAACG,KAAK,CAACI,SAAS;IAAA,EAAC,CAAC,CAAC;IACzD,IAAMC,gBAAgB,GAAGZ,QAAQ,CAAC;MAAA,OAAMI,KAAK,CAACS,OAAO,CAACD,gBAAgB;IAAA,EAAC,CAAC,CAAC;IACzE,IAAME,OAAO,GAAGd,QAAQ,CAAC;MAAA,OAAMI,KAAK,CAACS,OAAO,CAACC,OAAO;IAAA,EAAC,CAAC,CAAC;IACvD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,IAAI;MAAA,OAAKZ,KAAK,CAACS,OAAO,CAACE,cAAc,CAACC,IAAI,CAAC;IAAA,EAAC,CAAC;;IAErE,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA;MAAA,OAASb,KAAK,CAACc,QAAQ,CAAC,eAAe,CAAC;IAAA,GAAC;IAC5D,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIH,IAAI;MAAA,OAAKZ,KAAK,CAACc,QAAQ,CAAC,qBAAqB,EAAEF,IAAI,CAAC;IAAA,EAAC;;IAElF,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;MAC1B,IAAMC,QAAQ,GAAGV,SAAS,CAACF,KAAK,KAAK,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;MAC7DL,KAAK,CAACM,MAAM,CAAC,gBAAgB,EAAEW,QAAQ,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIN,IAAI,EAAK;MACjC,IAAI,CAACD,cAAc,CAACC,IAAI,CAAC,EAAE;QAAE;QACzBG,mBAAmB,CAACH,IAAI,CAAC,CAAC,CAAC;MAC/B;IACJ,CAAC;IAEDf,KAAK,CAACW,gBAAgB,EAAE,UAACW,WAAW,EAAK;MAAE;MACvCA,WAAW,CAACC,OAAO,CAAC,UAAAC,OAAO;QAAA,OAAIH,kBAAkB,CAACG,OAAO,CAACT,IAAI,CAAC;MAAA,EAAC,CAAC,CAAC;IACtE,CAAC,CAAC;IAEFd,SAAS,CAAC,YAAM;MACZe,aAAa,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}